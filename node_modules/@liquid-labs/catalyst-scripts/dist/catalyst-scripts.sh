#!/usr/bin/env bash

# bash strict settings
set -o errexit # exit on errors
set -o nounset # exit on use of uninitialized variable
set -o pipefail

ACTION="$1"; shift

# http://linuxcommand.org/lc3_adv_tput.php
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
purple=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`

bold=`tput bold`
red_b="${red}${bold}"
green_b="${green}${bold}"
yellow_b="${yellow}${bold}"
blue_b="${blue}${bold}"
purple_b="${purple}${bold}"
cyan_b="${cyan}${bold}"
white_b="${white}${bold}"

underline=`tput smul`
red_u="${red}${underline}"
green_u="${green}${underline}"
yellow_u="${yellow}${underline}"
blue_u="${blue}${underline}"
purple_u="${purple}${underline}"
cyan_u="${cyan}${underline}"
white_u="${white}${underline}"

red_bu="${red}${bold}${underline}"
green_bu="${green}${bold}${underline}"
yellow_bu="${yellow}${bold}${underline}"
blue_bu="${blue}${bold}${underline}"
purple_bu="${purple}${bold}${underline}"
cyan_bu="${cyan}${bold}${underline}"
white_bu="${white}${bold}${underline}"

reset=`tput sgr0`
list-add-item() {
  local LIST_VAR="${1}"; shift
  while (( $# > 0 )); do
    local ITEM
    ITEM="${1}"; shift
    # TODO: enforce no newlines in item

    if [[ -n "$ITEM" ]]; then
      if [[ -z "${!LIST_VAR:-}" ]]; then
        eval $LIST_VAR='"$ITEM"'
      else
        # echo $LIST_VAR='"${!LIST_VAR}"$'"'"'\n'"'"'"${ITEM}"'
        eval $LIST_VAR='"${!LIST_VAR:-}"$'"'"'\n'"'"'"${ITEM}"'
      fi
    fi
  done
}

list-add-uniq() {
  local LIST_VAR="${1}"; shift
  while (( $# > 0 )); do
    local ITEM
    ITEM="${1}"; shift
    # TODO: enforce no newlines in item
    if [[ -z $(list-get-index $LIST_VAR "$ITEM") ]]; then
      list-add-item $LIST_VAR "$ITEM"
    fi
  done
}

# Echos the number of items in the list.
#
# Takes single argument, the list var name.
#
# Example:
# list-add-item A B C
# list-count MY_LIST # echos '3'
list-count() {
  if [[ -z "${!1:-}" ]]; then
    echo -n "0"
  else
    echo -e "${!1}" | wc -l | tr -d '[:space:]'
  fi
}

list-from-csv() {
  local LIST_VAR="${1}"
  local CSV="${2:-}"

  if [[ -z "$CSV" ]]; then
    CSV="${!LIST_VAR:-}"
    unset ${LIST_VAR}
  fi

  if [[ -n "$CSV" ]]; then
    local ADDR
    while IFS=',' read -ra ADDR; do
      for i in "${ADDR[@]}"; do
        i="$(echo "$i" | awk '{$1=$1};1')"
        list-add-item "$LIST_VAR" "$i"
      done
    done <<< "$CSV"
  fi
}

list-get-index() {
  local LIST_VAR="${1}"
  local TEST="${2}"

  local ITEM
  local INDEX=0
  while read -r ITEM; do
    if [[ "${ITEM}" == "${TEST}" ]]; then
      echo $INDEX
      return
    fi
    INDEX=$(($INDEX + 1))
  done <<< "${!LIST_VAR:-}"
}

list-get-item() {
  local LIST_VAR="${1}"
  local INDEX="${2}"

  local CURR_INDEX=0
  local ITEM
  while read -r ITEM; do
    if (( $CURR_INDEX == $INDEX )) ; then
      echo -n "${ITEM%\\n}"
      return
    fi
    CURR_INDEX=$(($CURR_INDEX + 1))
  done <<< "${!LIST_VAR:-}"
}

# Echoes the frist item in the named list matching the given prefix.
#
# Example:
# LIST="foo bar"$'\n'"foo baz"
# list-get-item-by-prefix LIST "foo " # echoes 'foo bar'
list-get-item-by-prefix() {
  local LIST_VAR="${1}"
  local PREFIX="${2}"

  local ITEM
  while read -r ITEM; do
    if [[ "${ITEM}" == "${PREFIX}"* ]] ; then
      echo -n "${ITEM%\\n}"
      return
    fi
  done <<< "${!LIST_VAR:-}"
}

# Joins a list with a given string and echos the result. We use 'echo -e' for the join string, so '\n', '\t', etc. will
# work.
#
# Takes (1) the list variable name, (2) the join string
#
# Example:
# list-add-item MY_LIST A B C
# list-join MY_LIST '||' # echos 'A||B||C'
list-join() {
  local LIST_VAR="${1}"
  local JOIN_STRING="${2}"

  local CURR_INDEX=0
  local COUNT
  COUNT="$(list-count $LIST_VAR)"
  while read -r ITEM; do
    echo -n "$ITEM"
    CURR_INDEX=$(($CURR_INDEX + 1))
    if (( $CURR_INDEX < $COUNT )) ; then
      echo -ne "$JOIN_STRING"
    fi
  done <<< "${!LIST_VAR:-}"
}

list-replace-by-string() {
  local LIST_VAR="${1}"
  local TEST_ITEM="${2}"
  local NEW_ITEM="${3}"

  local ITEM INDEX NEW_LIST
  INDEX=0
  for ITEM in ${!LIST_VAR:-}; do
    if [[ "$(list-get-item $LIST_VAR $INDEX)" == "$TEST_ITEM" ]]; then
      list-add-item NEW_LIST "$NEW_ITEM"
    else
      list-add-item NEW_LIST "$ITEM"
    fi
    INDEX=$(($INDEX + 1))
  done
  eval $LIST_VAR='"'"$NEW_LIST"'"'
}

list-quote() {
  local LIST_VAR="${1}"

  while read -r ITEM; do
    echo -n "'$(echo "$ITEM" | sed -e "s/'/'\"'\"'/")' "
  done <<< "${!LIST_VAR:-}"
}

list-rm-item() {
  local LIST_VAR="${1}"; shift
  while (( $# > 0 )); do
    local ITEM NEW_ITEMS
    ITEM="${1}"; shift
    ITEM=${ITEM//\/\\/}
    ITEM=${ITEM//#/\\#}
    ITEM=${ITEM//./\\.}
    ITEM=${ITEM//[/\\[}
    # echo "ITEM: $ITEM" >&2
    NEW_ITEMS="$(echo "${!LIST_VAR:-}" | sed -e '\#^'"${ITEM}"'$#d')"
    eval $LIST_VAR='"'"$NEW_ITEMS"'"'
  done
}

if [[ $(uname) == 'Darwin' ]]; then
  GNU_GETOPT="$(brew --prefix gnu-getopt)/bin/getopt"
else
  GNU_GETOPT="$(which getopt)"
fi

# Usage:
#   eval "$(setSimpleOptions DEFAULT VALUE= SPECIFY_SHORT:X NO_SHORT: LONG_ONLY:= COMBINED:C= -- "$@")" \
#     || ( contextHelp; echoerrandexit "Bad options."; )
setSimpleOptions() {
  local SCRIPT SET_COUNT VAR_SPEC LOCAL_DECLS
  local LONG_OPTS=""
  local SHORT_OPTS=""

  # our own, bootstrap option processing
  while [[ "${1:-}" == '-'* ]]; do
    local OPT="${1}"; shift
    case "${OPT}" in
      --set-count)
        SET_COUNT="${1}"
        shift;;
      --script)
        SCRIPT=true;;
      --) # usually we'd find a non-option first, but this is valid; we were called with no options specs to process.
        break;;
      *)
        echoerrandexit "Unknown option: $1";;
    esac
  done

  # Bash Bug? This looks like a straight up bug in bash, but the left-paren in
  # '--)' was matching the '$(' and causing a syntax error. So we use ']' and
  # replace it later.
  local CASE_HANDLER=$(cat <<EOF
    --]
      break;;
EOF
)
  while true; do
    if (( $# == 0 )); then
      echoerrandexit "setSimpleOptions: No argument to process; did you forget to include the '--' marker?"
    fi
    VAR_SPEC="$1"; shift
    local VAR_NAME LOWER_NAME SHORT_OPT LONG_OPT IS_PASSTHRU
    IS_PASSTHRU=''
    if [[ "$VAR_SPEC" == *'^' ]]; then
      IS_PASSTHRU=true
      VAR_SPEC=${VAR_SPEC/%^/}
    fi
    local OPT_ARG=''
    if [[ "$VAR_SPEC" == *'=' ]]; then
      OPT_ARG=':'
      VAR_SPEC=${VAR_SPEC/%=/}
    fi

    if [[ "$VAR_SPEC" == '--' ]]; then
      break
    elif [[ "$VAR_SPEC" == *':'* ]]; then
      VAR_NAME=$(echo "$VAR_SPEC" | cut -d: -f1)
      SHORT_OPT=$(echo "$VAR_SPEC" | cut -d: -f2)
    else # each input is a variable name
      VAR_NAME="$VAR_SPEC"
      SHORT_OPT=$(echo "${VAR_NAME::1}" | tr '[:upper:]' '[:lower:]')
    fi

    VAR_NAME=$(echo "$VAR_NAME" | tr -d "=")
    LOWER_NAME=$(echo "$VAR_NAME" | tr '[:upper:]' '[:lower:]')
    LONG_OPT="$(echo "${LOWER_NAME}" | tr '_' '-')"

    if [[ -n "${SHORT_OPT}" ]]; then
      SHORT_OPTS="${SHORT_OPTS:-}${SHORT_OPT}${OPT_ARG}"
    fi

    LONG_OPTS=$( ( test ${#LONG_OPTS} -gt 0 && echo -n "${LONG_OPTS},") || true && echo -n "${LONG_OPT}${OPT_ARG}")

    # Note, we usually want locals, so we actually just blindling build it up and then decide wether to include it at
    # the last minute.
    LOCAL_DECLS="${LOCAL_DECLS:-}local ${VAR_NAME}='';"
    local CASE_SELECT="-${SHORT_OPT}|--${LONG_OPT}]"
    if [[ "$IS_PASSTHRU" == true ]]; then # handle passthru
      CASE_HANDLER=$(cat <<EOF
        ${CASE_HANDLER}
          ${CASE_SELECT}
          list-add-item _PASSTHRU "\$1"
EOF
      )
      if [[ -n "$OPT_ARG" ]]; then
        CASE_HANDLER=$(cat <<EOF
          ${CASE_HANDLER}
            list-add-item _PASSTHRU "\$2"
            shift
EOF
        )
      fi
      CASE_HANDLER=$(cat <<EOF
        ${CASE_HANDLER}
          shift;;
EOF
      )
    else # non-passthru vars
      local VAR_SETTER="${VAR_NAME}=true;"
      if [[ -n "$OPT_ARG" ]]; then
        LOCAL_DECLS="${LOCAL_DECLS}local ${VAR_NAME}_SET='';"
        VAR_SETTER=${VAR_NAME}'="${2}"; '${VAR_NAME}'_SET=true; shift;'
      fi
      if [[ -z "$SHORT_OPT" ]]; then
        CASE_SELECT="--${LONG_OPT}]"
      fi
      CASE_HANDLER=$(cat <<EOF
      ${CASE_HANDLER}
        ${CASE_SELECT}
          $VAR_SETTER
          _OPTS_COUNT=\$(( \$_OPTS_COUNT + 1))
          shift;;
EOF
      )
    fi
  done # main while loop
  CASE_HANDLER=$(cat <<EOF
    case "\${1}" in
      $CASE_HANDLER
    esac
EOF
)
  # replace the ']'; see 'Bash Bug?' above
  CASE_HANDLER=$(echo "$CASE_HANDLER" | perl -pe 's/\]$/)/')

  # now we actually start the output to be evaled by the caller.

  # In script mode, we skip the local declarations. When used in a function
  # (i.e., not in scirpt mode), we declare everything local.
  if [[ -z "${SCRIPT:-}" ]]; then
    echo "${LOCAL_DECLS}"
    cat <<'EOF'
local _OPTS_COUNT=0
local _PASSTHRU=""
local TMP # see https://unix.stackexchange.com/a/88338/84520
EOF
  else # even though we don't declare local, we still want to support 'strict'
    # mode, so we do have to declare, just not local
    echo "${LOCAL_DECLS}" | sed -E 's/(^|;)[[:space:]]*local /\1/g'
    cat <<'EOF'
_OPTS_COUNT=0
_PASSTHRU=""
EOF
  fi

  cat <<EOF
TMP=\$(${GNU_GETOPT} -o "${SHORT_OPTS}" -l "${LONG_OPTS}" -- "\$@") \
  || exit \$?
eval set -- "\$TMP"
while true; do
  $CASE_HANDLER
done
shift
if [[ -n "\$_PASSTHRU" ]]; then
  eval set -- \$(list-quote _PASSTHRU) "\$@"
fi
EOF
  [[ -z "${SET_COUNT:-}" ]] || echo "${SET_COUNT}=\${_OPTS_COUNT}"
}

# Formats and echoes the the message.
#
# * Will process special chars the same as 'echo -e' (so \t, \n, etc. can be used in the message).
# * Treats all arguments as the message. 'echofmt "foo bar"' and 'echofmt foo bar' are equivalent.
# * Error and warning messages are directed towards stderr (unless modified by options).
# * Default message width is the lesser of 82 columns or the terminal column width.
# * Environment variable 'ECHO_WIDTH' will set the width. The '--width' option will override the environment variable.
# * Environment variable 'ECHO_QUIET' will suppress all non-error, non-warning messages if set to any non-empty value.
# * Environment variable 'ECHO_SILENT' will suppress all non-error messages if set to any non-empty value.
# * Environment variable 'ECHO_STDERR' will cause all output to be directed to stderr unless '--stderr' or '--stdout'
#   is specified.
# * Environment variable 'ECHO_STDOUT' will cause all output to be directed to stdout unless '--stderr' or '--stdout'
#   is specified.
echofmt() {
  local OPTIONS='INFO WARN ERROR WIDTH NO_FOLD:F STDERR STDOUT'
  eval "$(setSimpleOptions ${OPTIONS} -- "$@")"

  # First, let's check to see of the message is suppressed. The 'return 0' is explicitly necessary. 'return' sends
  # along $?, which, if it gets there, is 1 due to the failed previous test.
  ! { [[ -n "${ECHO_SILENT:-}" ]] && [[ -z "${ERROR:-}" ]]; } || return 0
  ! { [[ -n "${ECHO_QUIET:-}" ]] && [[ -z "${ERROR:-}" ]] && [[ -z "${WARN}" ]]; } || return 0

  # Examine environment to see if the redirect controls are set.
  if [[ -z "${STDERR:-}" ]] && [[ -z "${STDOUT:-}" ]]; then
    [[ -z "${ECHO_STDERR:-}" ]] || STDERR=true
    [[ -z "${ECHO_STDOUT:-}" ]] || STDOUT=true
  fi

  # Determine width... if folding
  [[ -z "${NO_FOLD:-}" ]] && [[ -n "${WIDTH:-}" ]] || { # If width is set as an option, then that's the end of story.
    local DEFAULT_WIDTH=82
    local WIDTH="${ECHO_WIDTH:-}"
    [[ -n "${WIDTH:-}" ]] || WIDTH=$DEFAULT_WIDTH
    # ECHO_WIDTH and DEFAULT_WIDTH are both subject to actual terminal width limitations.
    local TERM_WIDITH
    TERM_WIDTH=$(tput cols)
    (( ${TERM_WIDTH} >= ${WIDTH} )) || WIDTH=${TERM_WIDTH}
  }

  # Determine output color, if any.
  # internal helper function; set's 'STDERR' true unless target has already been set with '--stderr' or '--stdout'
  default-stderr() {
    [[ -n "${STDERR:-}" ]] || [[ -n "${STDOUT:-}" ]] || STDERR=true
  }
  local COLOR=''
  if [[ -n "${ERROR:-}" ]]; then
    COLOR="${red}"
    default-stderr
  elif [[ -n "${WARN:-}" ]]; then
    COLOR="${yellow}"
    default-stderr
  elif [[ -n "${INFO:-}" ]]; then
    COLOR="${green}"
  fi

  # we don't want to use an eval, and the way bash is evaluated means we can't do 'echo ... ${REDIRECT}' or something.
  if [[ -n "${STDERR:-}" ]]; then
    if [[ -z "$NO_FOLD" ]]; then
      echo -e "${COLOR:-}$*${reset}" | fold -sw "${WIDTH}" >&2
    else
      echo -e "${COLOR:-}$*${reset}" >&2
    fi
  else
    if [[ -z "${NO_FOLD:-}" ]]; then
      echo -e "${COLOR:-}$*${reset}" | fold -sw "${WIDTH}"
    else
      echo -e "${COLOR:-}$*${reset}"
    fi
  fi
}

echoerr() {
  echofmt --error "$@"
}

echowarn() {
  echofmt --warn "$@"
}

# Echoes a formatted message to STDERR. The default exit code is '1', but if 'EXIT_CODE', then that will be used. E.g.:
#
#    EXIT_CODE=5
#    echoerrandexit "Fatal code 5
#
# 'ECHO_NEVER_EXIT' can be set to any non-falsy value to supress the exit. This is intended primarily for use when liq
# functions are sourced and called directly from within the main shell, in which case exiting would kill the entire
# terminal session.
#
# See echofmt for further options and details.
echoerrandexit() {
  echofmt --error "$@"

  if [[ -z "${ECHO_NEVER_EXIT:-}" ]]; then
    [[ -z "${EXIT_CODE:-}" ]] || exit ${EXIT_CODE}
    exit 1
  fi
}

# Tries to find the named exec via NPM or optional search locations. The locations may either be paths or NPM packages.
function find_exec {
  local EXEC_NAME="$1"; shift

  # first, we look if it's in our own bin
  local EXEC="$(npm root)/.bin/$EXEC_NAME"
  # next, we check other named package directories (if any)
  if [[ ! -x "$EXEC" ]]; then
    local SEARCH_REF
    for SEARCH_REF in "$@"; do
      if [[ "${SEARCH_REF}" == '@'* ]]; then # assume it's a package name
        EXEC="$(npm explore "${SEARCH_REF}" -- "npm root")/.bin/${EXEC_NAME}"
        if [[ -x "$EXEC" ]]; then
          echo "${EXEC}"
          return 0
        fi
      else
        (
          cd "$SEARCH_REF"
          if [[ -x "$EXEC_NAME" ]]; then # try looking in the dir itself
            echo "${EXEC_NAME}"
            return 0
          else # see if it's an NPM thing...
            EXEC=$(npm root)/.bin/$EXEC_NAME #
            if [[ -x "$EXEC" ]]; then
              echo "${EXEC}"
              return 0
            fi
          fi
        )
      fi
    done
  fi
  # finally, we look in the system PATH
  if [[ ! -x "$EXEC" ]]; then
    if which -s $EXEC_NAME; then
      EXEC=$EXEC_NAME
    else
      return 10
    fi
  fi

  echo $EXEC
}

function require-exec() {
  local EXEC_NAME="$1"
  if ! find_exec "$@"; then
    EXIT_CODE=10 echoerrandexit "Could not locate executable '$EXEC_NAME'; bailing out."
  fi
}
function catalyst_pretest() {
  if [[ -d 'go' ]]; then
    if ! data_reset; then
      COMMAND="${COMMAND}echo 'Skippeng DB reset.';"
    elif test_integration && [[ -n "$(find go -name "sql.go" -print -quit)" ]]; then
      # Because go generally builds faster than DBs reset, we check the build
      # first to avoid possible costly and pointless DB reset.
      COMMAND="${COMMAND}echo 'Complie check...'; cd go && go build ./...; cd ..;"
      # Rebuild the schema
      COMMAND="${COMMAND}"'echo "Ressetting database..."; catalyst data rebuild sql || ( EXIT=$?; echo -e "If you want to run only unit tests, you can invoke the NPM command like\nTEST_TYPES=unit npm run test"; exit $EXIT );'
      # Load test data (if any)
      if [[ -d "./data/sql/test" ]]; then
        COMMAND="${COMMAND}catalyst data load test;"
      else
        echo "No test data files found."
      fi
    fi
  fi
  if [[ -d "${JS_SRC}" ]]; then
    BABEL=$(require-exec babel)
    BABEL_CONFIG="${CONFIG_PATH}/babel.config.js"
    # Jest is not picking up the external maps, so we inline them for the test. (As of?)
    COMMAND="${COMMAND}rm -rf test-staging; ${BABEL} --config-file ${BABEL_CONFIG} ./${JS_SRC} --out-dir test-staging --source-maps=inline"
  fi
}
function catalyst_test() {
  # TODO: check for 'catalyst' and issue info re. catalyst for to run integration tests
  if [[ -d 'go' ]]; then
    if [[ -n "${GO_RUN:-}" ]]; then GO_RUN="-run '${GO_RUN}'"; fi
    if test_all; then
      COMMAND='cd go; env $(catalyst environments show | tail -n +2 | xargs) go test -v ./... '${GO_RUN:-}'; cd ..;'
    elif test_unit; then
      COMMAND='cd go; env $(catalyst environments show | tail -n +2 | xargs) SKIP_INTEGRATION=true go test -v ./... '${GO_RUN:-}'; cd ..;'
    elif test_integration; then
      if [[ -z "${GO_RUN}" ]]; then GO_RUN="-run Integration"; fi
      COMMAND='cd go; env $(catalyst environments show | tail -n +2 | xargs) go test -v ./... '${GO_RUN}'; cd ..;'
    fi
  fi
  if [[ -d test-staging ]]; then
    if (( $(find ./test-staging -name '*.js' -o -name '*.mjs' | wc -l) > 0 )); then
      JEST="$(require-exec jest '@liquid-labs/catalyst-scripts')"
      JEST_CONFIG="${CONFIG_PATH}/jest.config.js"
      # the '--runInBand' is necessary for the 'seqtests' to work.
      COMMAND="${COMMAND}${JEST} --config=${JEST_CONFIG} --runInBand ./test-staging;"
    fi
    # else nothing to do; no JS files to test
  else
    echoerr "Did not find expected './test-staging'. Try setting the 'pretest' script:\n\"pretest\": \"catalyst-scripts pretest\""
  fi
}

SCRIPTS_INSTALL="$(npm explore @liquid-labs/catalyst-scripts -- pwd)"
CONFIG_PATH="${SCRIPTS_INSTALL}/config"
# TODO: support 'JS_DIR' and deprecate 'JS_SRC'
# TODO: deprecate auto-build of js directory since we prefer to use 'src' as default, but don't want to auto-build src
if [[ -z "${NO_BUILD:-}" ]]; then
  if [[ -n "${JS_SRC:-}" ]] && [[ -n "${JS_FILE:-}" ]]; then
    echoerrandexit "Cannot specify both 'JS_SRC' and 'JS_FILE'"
  fi
  # maintain (soon to be deprecated) default 'js' build
  [[ -n "${JS_FILE:-}" ]] || [[ -n "${JS_SRC:-}" ]] || JS_SRC='js'
  # now we set up the references that we need for the build and lint commands
  if [[ -n "${JS_FILE:-}" ]]; then
    JS_BUILD_TARGET="${JS_FILE}"
    JS_LINT_TARGET="${JS_FILE}"
  elif [[ -d "${JS_SRC}" ]]; then
    ! [[ -f "${JS_SRC}/index.js" ]] || JS_BUILD_TARGET="${JS_SRC}/index.js"
    ! [[ -f "${JS_SRC}/index.mjs" ]] || JS_BUILD_TARGET="${JS_SRC}/index.mjs"
    [[ -n "${JS_BUILD_TARGET:-}" ]] || {
      echo "Could not determine index file from JS_SRC: $JS_SRC" >&2
      exit 1
    }
  fi
fi

_ADD_SCRIPT_WARNING=false
function add_script() {
  KEY="${1:-}"
  VALUE="${2:-}"
  if [[ -z "$KEY" ]] || [[ -z "$VALUE" ]] || [[ -z "$ADDSCRIPT" ]]; then
    echo "INTERNAL ERROR: add script called without requried args." >&2
    exit 255
  fi

  $ADDSCRIPT -k "$KEY" -v "$VALUE" >/dev/null 2>/dev/null || (_ADD_SCRIPT_WARNING=true && $ADDSCRIPT -f -k "$KEY" -v "$VALUE" >/dev/null)
}

function test_all() {
  test -z "${TEST_TYPES:-}" || ( test_unit && test_integration )
}

function test_unit() {
  [[ -z "${TEST_TYPES:-}" ]] || echo "$TEST_TYPES" | grep -qE '(^|, *| +)unit?(, *| +|$)'
}

function test_integration() {
  [[ -z "${TEST_TYPES:-}" ]] || echo "$TEST_TYPES" | grep -qE '(^|, *| +)int(egration)?(, *| +|$)'
}

function data_reset() {
  test -z "${NO_DATA_RESET:-}"
}

COMMAND=''
case "$ACTION" in
  setup-scripts)
    ADDSCRIPT=$(require-exec npmAddScript)
    add_script build 'catalyst-scripts build'
    add_script start 'catalyst-scripts start'
    add_script lint 'catalyst-scripts lint'
    add_script lint-fix 'catalyst-scripts lint-fix'
    add_script install-clean 'rm -rf package-lock.json node_modules/ && npm install'
    add_script prepare 'rm -rf dist && npm run lint && npm run build'
    add_script pretest 'catalyst-scripts pretest'
    add_script test 'catalyst-scripts test'
    if [[ "$_ADD_SCRIPT_WARNING" -eq "true" ]]; then
      echo "Possibly verwrote some existing scripts. Check your package.json diff and update as necessary."
    fi
  ;;
  pretest)
    catalyst_pretest
  ;;
  test)
    catalyst_test
  ;;
  build)
    # TODO: support building specific ones
    if [[ -d 'go' ]]; then
      COMMAND="${COMMAND}echo 'building go...'; cd go; go build ./...; cd ..;"
      # TODO: support watch
    fi
    if [[ -f "${JS_BUILD_TARGET:-}" ]]; then
      ROLLUP="JS_BUILD_TARGET='${JS_BUILD_TARGET}' $(require-exec rollup)"
      ROLLUP_CONFIG="${CONFIG_PATH}/rollup.config.js"
      COMMAND="${COMMAND}echo 'building js...';"
      COMMAND="${COMMAND}${ROLLUP} --config ${ROLLUP_CONFIG};"
      # TODO: make the yalc push conditional
      # TODO: 'yalc push' was triggering 'npm prepare' which was running lint and build and then (somehow) causing an infinite loop
      # COMMAND="${COMMAND}yalc push;"
    fi
    if [[ -z "${COMMAND:-}" ]]; then
      echoerrandexit "Did not find anything to build. Did you need to specify JS_SRC or JS_FILE? Recall, 'JS_SRC' is used to target a directory containing an 'index.js' file and potentially other '.js' files. 'JS_FILE' is used to specify a single target file. Using 'JS_SRC' to target a file can cause this error."
    fi
  ;;
  watch)
    # TODO: move this to ancillary docs.
    # Note: we originally tried to use 'rollup --watch' directly as it it would
    # be a bit quicker, but with the yalc push needed for sane "linking" it was
    # hard. We tried to use a rollup plugin to push after the bundles were built
    # but there is simple no "rollup is done" trigger and attempts to detect
    # when rollup made things too complex. See note 'yalc-push plugin'
    # in 'rollup.config'
    # TODO: watch and build go and js separately
    WATCH_DIRS=''
    if [[ -d 'go' ]]; then
      WATCH_DIRS="go"
    fi
    if [[ -d 'js' ]]; then
      WATCH_DIRS="${WATCH_DIRS} js"
    fi
    COMMAND="${COMMAND}npx --no-install watch 'npx --no-install catalyst-scripts build' ${WATCH_DIRS};"
  ;;
  lint | lint-fix)
   # JS_LINT_TARGET can and often is empty.
    # TODO: I think we can depricate the '.liq.eslint.target' option; see where it's used.
    [[ -n "${JS_LINT_TARGET:-}" ]] \
      || JS_LINT_TARGET=$(jq -r '.liq.eslint.target // ""' package.json)
    [[ -n "${JS_LINT_TARGET}" ]] \
      || JS_LINT_TARGET=.
    ESLINT_CONFIG="${CONFIG_PATH}/eslintrc.js"
    ESLINT=$(require-exec eslint)
    # Note the '--ext' option only works with directories and 'JS_LINT_TARGET' defaults to '.'. We'd actually like to
    # handle mor of this from 'eslintrc.js', but AFAIK, this is the only way to do this.
    COMMAND="${COMMAND}$ESLINT --config ${ESLINT_CONFIG} --ext .js,.mjs,.xjs --ignore-pattern 'dist/**/*' ${JS_LINT_TARGET}"
    if [[ "$ACTION" == 'lint-fix' ]]; then
      COMMAND="${COMMAND} --fix"
    fi
    COMMAND="${COMMAND};"
  ;;
  *)
    echo "Unknown catalyst-scripts action: '$ACTION'." >&2
    exit 1
  ;;
esac

eval $COMMAND
