"use strict";

var _wrap = require("../wrap");
/* global describe expect test */

describe('wrap', function () {
  describe('basic wrapping', function () {
    test.each([['123 56 89', 5, '123\n56 89'], ['123 56 89', 6, '123 56\n89'], ['123 56 89', 7, '123 56\n89'], ['123 56 89', 9, '123 56 89'], ['123-56 89', 5, '123-\n56 89'], ['123-56 89', 6, '123-56\n89'], ['123-56 89', 7, '123-56\n89'], ['123-56 89', 9, '123-56 89']])("Wrapping '%s' width: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        width: width
      })).toEqual(result);
    });
    test.each([[' 123 56 89', 5, ' 123\n56 89'], ['  123 56 89', 5, '  123\n56 89'], ['   123 56 89', 5, '   12\n3 56\n89']])("Respect initial indent; '%s' width: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        width: width
      })).toEqual(result);
    });
  });
  describe('ignore tags wrap', function () {
    test.each([['1<foo>23 56 89', 5, 0, '1<foo>23\n56 89'], ['123 <foo>56 89', 5, 0, '123\n<foo>56 89'], ['123 <foo>56 89', 4, 0, '123\n<foo>56\n89'], ['123 <foo>56 89', 4, 1, ' 123\n <foo>56\n 89']])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, indent, result) {
      expect((0, _wrap.wrap)(input, {
        indent: indent,
        ignoreTags: true,
        width: width
      })).toEqual(result);
    });
  });
  describe('constant indents', function () {
    test.each([['123 56 89', 5, 1, ' 123\n 56\n 89'], ['123-56 89', 5, 1, ' 123-\n 56\n 89'], ['123-56 89', 5, 2, '  123\n  -56\n  89']
    //['123-56 89', 5, 2, '  123-\n  56\n  89']
    ])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, indent, result) {
      expect((0, _wrap.wrap)(input, {
        indent: indent,
        width: width
      })).toEqual(result);
    });
  });
  describe('smart indenting', function () {
    test.each([
    // smart indent active, but nothing to smart indent
    ['123 56 89', 5, '123\n56 89'], ['123 <foo>56 89', 5, '123\n<foo>56 89'], ['- 1\n- <foo>23 56 89', 5, '- 1\n- <foo>23\n  56\n  89'], ['123\n- <foo>56 89', 4, '123\n- <foo>56\n  89'], ['123\n- <foo>abcd efg\n  - a longer line', 8, '123\n- <foo>abcd\n  efg\n  - a\n    long\n    er\n    line']])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        ignoreTags: true,
        smartIndent: true,
        width: width
      })).toEqual(result);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd3JhcCIsInJlcXVpcmUiLCJkZXNjcmliZSIsInRlc3QiLCJlYWNoIiwiaW5wdXQiLCJ3aWR0aCIsInJlc3VsdCIsImV4cGVjdCIsIndyYXAiLCJ0b0VxdWFsIiwiaW5kZW50IiwiaWdub3JlVGFncyIsInNtYXJ0SW5kZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3Qvd3JhcC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBkZXNjcmliZSBleHBlY3QgdGVzdCAqL1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4uL3dyYXAnXG5cbmRlc2NyaWJlKCd3cmFwJywgKCkgPT4ge1xuICBkZXNjcmliZSgnYmFzaWMgd3JhcHBpbmcnLCAoKSA9PiB7XG4gICAgdGVzdC5lYWNoKFtcbiAgICAgIFsnMTIzIDU2IDg5JywgNSwgJzEyM1xcbjU2IDg5J10sXG4gICAgICBbJzEyMyA1NiA4OScsIDYsICcxMjMgNTZcXG44OSddLFxuICAgICAgWycxMjMgNTYgODknLCA3LCAnMTIzIDU2XFxuODknXSxcbiAgICAgIFsnMTIzIDU2IDg5JywgOSwgJzEyMyA1NiA4OSddLFxuICAgICAgWycxMjMtNTYgODknLCA1LCAnMTIzLVxcbjU2IDg5J10sXG4gICAgICBbJzEyMy01NiA4OScsIDYsICcxMjMtNTZcXG44OSddLFxuICAgICAgWycxMjMtNTYgODknLCA3LCAnMTIzLTU2XFxuODknXSxcbiAgICAgIFsnMTIzLTU2IDg5JywgOSwgJzEyMy01NiA4OSddXG4gICAgXSkoXCJXcmFwcGluZyAnJXMnIHdpZHRoOiAlaSB5aWVsZHMgJyVzJ1wiLCAoaW5wdXQsIHdpZHRoLCByZXN1bHQpID0+IHtcbiAgICAgIGV4cGVjdCh3cmFwKGlucHV0LCB7IHdpZHRoIH0pKS50b0VxdWFsKHJlc3VsdClcbiAgICB9KVxuXG4gICAgdGVzdC5lYWNoKFtcbiAgICAgIFsnIDEyMyA1NiA4OScsIDUsICcgMTIzXFxuNTYgODknXSxcbiAgICAgIFsnICAxMjMgNTYgODknLCA1LCAnICAxMjNcXG41NiA4OSddLFxuICAgICAgWycgICAxMjMgNTYgODknLCA1LCAnICAgMTJcXG4zIDU2XFxuODknXVxuICAgIF0pKFwiUmVzcGVjdCBpbml0aWFsIGluZGVudDsgJyVzJyB3aWR0aDogJWkgeWllbGRzICclcydcIiwgKGlucHV0LCB3aWR0aCwgcmVzdWx0KSA9PiB7XG4gICAgICBleHBlY3Qod3JhcChpbnB1dCwgeyB3aWR0aCB9KSkudG9FcXVhbChyZXN1bHQpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnaWdub3JlIHRhZ3Mgd3JhcCcsICgpID0+IHtcbiAgICB0ZXN0LmVhY2goW1xuICAgICAgWycxPGZvbz4yMyA1NiA4OScsIDUsIDAsICcxPGZvbz4yM1xcbjU2IDg5J10sXG4gICAgICBbJzEyMyA8Zm9vPjU2IDg5JywgNSwgMCwgJzEyM1xcbjxmb28+NTYgODknXSxcbiAgICAgIFsnMTIzIDxmb28+NTYgODknLCA0LCAwLCAnMTIzXFxuPGZvbz41Nlxcbjg5J10sXG4gICAgICBbJzEyMyA8Zm9vPjU2IDg5JywgNCwgMSwgJyAxMjNcXG4gPGZvbz41NlxcbiA4OSddXG4gICAgXSkoXCJXcmFwcGluZyAnJXMnIHdpZHRoOiAlaSwgaW5kOiAlaSB5aWVsZHMgJyVzJ1wiLCAoaW5wdXQsIHdpZHRoLCBpbmRlbnQsIHJlc3VsdCkgPT4ge1xuICAgICAgZXhwZWN0KHdyYXAoaW5wdXQsIHsgaW5kZW50LCBpZ25vcmVUYWdzIDogdHJ1ZSwgd2lkdGggfSkpLnRvRXF1YWwocmVzdWx0KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2NvbnN0YW50IGluZGVudHMnLCAoKSA9PiB7XG4gICAgdGVzdC5lYWNoKFtcbiAgICAgIFsnMTIzIDU2IDg5JywgNSwgMSwgJyAxMjNcXG4gNTZcXG4gODknXSxcbiAgICAgIFsnMTIzLTU2IDg5JywgNSwgMSwgJyAxMjMtXFxuIDU2XFxuIDg5J10sXG4gICAgICBbJzEyMy01NiA4OScsIDUsIDIsICcgIDEyM1xcbiAgLTU2XFxuICA4OSddXG4gICAgICAvL1snMTIzLTU2IDg5JywgNSwgMiwgJyAgMTIzLVxcbiAgNTZcXG4gIDg5J11cbiAgICBdKShcIldyYXBwaW5nICclcycgd2lkdGg6ICVpLCBpbmQ6ICVpIHlpZWxkcyAnJXMnXCIsIChpbnB1dCwgd2lkdGgsIGluZGVudCwgcmVzdWx0KSA9PiB7XG4gICAgICBleHBlY3Qod3JhcChpbnB1dCwgeyBpbmRlbnQsIHdpZHRoIH0pKS50b0VxdWFsKHJlc3VsdClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdzbWFydCBpbmRlbnRpbmcnLCAoKSA9PiB7XG4gICAgdGVzdC5lYWNoKFtcbiAgICAgIC8vIHNtYXJ0IGluZGVudCBhY3RpdmUsIGJ1dCBub3RoaW5nIHRvIHNtYXJ0IGluZGVudFxuICAgICAgWycxMjMgNTYgODknLCA1LCAnMTIzXFxuNTYgODknXSxcbiAgICAgIFsnMTIzIDxmb28+NTYgODknLCA1LCAnMTIzXFxuPGZvbz41NiA4OSddLFxuICAgICAgWyctIDFcXG4tIDxmb28+MjMgNTYgODknLCA1LCAnLSAxXFxuLSA8Zm9vPjIzXFxuICA1NlxcbiAgODknXSxcbiAgICAgIFsnMTIzXFxuLSA8Zm9vPjU2IDg5JywgNCwgJzEyM1xcbi0gPGZvbz41NlxcbiAgODknXSxcbiAgICAgIFsnMTIzXFxuLSA8Zm9vPmFiY2QgZWZnXFxuICAtIGEgbG9uZ2VyIGxpbmUnLCA4LCAnMTIzXFxuLSA8Zm9vPmFiY2RcXG4gIGVmZ1xcbiAgLSBhXFxuICAgIGxvbmdcXG4gICAgZXJcXG4gICAgbGluZSddXG4gICAgXSkoXCJXcmFwcGluZyAnJXMnIHdpZHRoOiAlaSwgaW5kOiAlaSB5aWVsZHMgJyVzJ1wiLCAoaW5wdXQsIHdpZHRoLCByZXN1bHQpID0+IHtcbiAgICAgIGV4cGVjdCh3cmFwKGlucHV0LCB7IGlnbm9yZVRhZ3MgOiB0cnVlLCBzbWFydEluZGVudDogdHJ1ZSwgd2lkdGggfSkpLnRvRXF1YWwocmVzdWx0KVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoi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