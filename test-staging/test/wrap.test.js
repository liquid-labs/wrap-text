"use strict";

var _wrap = require("../wrap");
/* global describe expect test */

describe('wrap', function () {
  describe('basic wrapping', function () {
    test.each([['123 56 89', 5, '123\n56 89'], ['123 56 89', 6, '123 56\n89'], ['123 56 89', 7, '123 56\n89'], ['123 56 89', 9, '123 56 89'], ['123-56 89', 5, '123-\n56 89'], ['123-56 89', 6, '123-56\n89'], ['123-56 89', 7, '123-56\n89'], ['123-56 89', 9, '123-56 89']])("Wrapping '%s' width: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        width: width
      })).toEqual(result);
    });
    test.each([[' 123 56 89', 5, ' 123\n56 89'], ['  123 56 89', 5, '  123\n56 89'], ['   123 56 89', 5, '   12\n3 56\n89']])("Respect initial indent; '%s' width: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        width: width
      })).toEqual(result);
    });
  });
  describe('ignore tags wrap', function () {
    test.each([['1<foo>23 56 89', 5, 0, '1<foo>23\n56 89'], ['123 <foo>56 89', 5, 0, '123\n<foo>56 89'], ['123 <foo>56 89', 4, 0, '123\n<foo>56\n89'], ['123 <foo>56 89', 4, 1, ' 123\n <foo>56\n 89']])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, indent, result) {
      expect((0, _wrap.wrap)(input, {
        indent: indent,
        ignoreTags: true,
        width: width
      })).toEqual(result);
    });
  });
  describe('constant indents', function () {
    test.each([['123 56 89', 5, 1, ' 123\n 56\n 89'], ['123-56 89', 5, 1, ' 123-\n 56\n 89'], ['123-56 89', 5, 2, '  123\n  -56\n  89']
    //['123-56 89', 5, 2, '  123-\n  56\n  89']
    ])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, indent, result) {
      expect((0, _wrap.wrap)(input, {
        indent: indent,
        width: width
      })).toEqual(result);
    });
  });
  describe('hangin indents', function () {
    test.each([['123 56 89', 6, 1, '123 56\n 89'], ['123-56 89', 5, 1, '123-\n 56\n 89'], ['123-56 89', 5, 2, '123-\n  56\n  89']
    //['123-56 89', 5, 2, '  123-\n  56\n  89']
    ])("Wrapping '%s' width: %i, hanging ind: %i yields '%s'", function (input, width, hangingIndent, result) {
      expect((0, _wrap.wrap)(input, {
        hangingIndent: hangingIndent,
        width: width
      })).toEqual(result);
    });
  });
  describe('smart indenting', function () {
    test.each([
    // smart indent active, but nothing to smart indent
    ['123 56 89', 5, '123\n56 89'], ['123 <foo>56 89', 5, '123\n<foo>56 89'], ['- 1\n- <foo>23 56 89', 5, '- 1\n- <foo>23\n  56\n  89'], ['123\n- <foo>56 89', 4, '123\n- <foo>56\n  89'], ['123\n- <foo>abcd efg\n  - a longer line', 8, '123\n- <foo>abcd\n  efg\n  - a\n    long\n    er\n    line']])("Wrapping '%s' width: %i, ind: %i yields '%s'", function (input, width, result) {
      expect((0, _wrap.wrap)(input, {
        ignoreTags: true,
        smartIndent: true,
        width: width
      })).toEqual(result);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,